Chapter 5. Camera controls and properties 5.1. Camera controls Camera controls represent parameters that the camera exposes, and which we can alter to change the nature of the images it outputs in various ways. In Picamera2, all camera controls can be changed at runtime. Anything that cannot be changed at runtime is regarded not as a control but as configuration. We do, however, allow the camera’s configuration to include controls in case there are particular standard control values that could be conveniently applied along with the rest of the configuration. For example, some obvious controls that we might want to set while the camera is delivering images are: • Exposure time • Gain • White balance • Colour saturation • Sharpness …and there are many more. A complete list of all the available camera controls can be found in the appendices, and also by inspecting the camera_controls property of the Picamera2 object: from picamera2 import Picamera2 picam2 = Picamera2() picam2.camera_controls This returns a dictionary with the control names as keys, and each value being a tuple of (min, max, default) values for that control. The default value should be interpreted with some caution as in many cases libcamera’s default value will be overwritten by the camera tuning as soon as the camera is started. Things that are not controls include: • The image resolution • The format of the pixels as these can only be set up when the camera is configured. One example of a control that might be assoicated with a configuration might be the camera’s framerate (or equivalently, the frame duration). Normally we might let a camera operate at whatever framerate is appropriate to the exposure time requested. For video recording, however, it’s quite common to fix the framerate to (for example) 30 frames per second, and so this might be included by default along with the rest of the video configuration. 5.1.1. How to set camera controls There a three distinct times when camera controls can be set: 1. Into the camera configuration. These will be stored with the configuration so that they will be re-applied whenever that configuration is requested. They will be enacted before the camera starts. 5.1. Camera controls 30The Picamera2 Library 2. After configuration but before the camera starts. The controls will again take effect before the camera starts, but will not be stored with the configuration and so would not be re-applied again automatically. 3. After the camera has started. The camera system will apply the controls as soon as it can, but typically there will be some number of frames of delay. Camera controls can be set by passing a dictionary of updates to the set_controls method, but there is also an object style syntax for accomplishing the same thing. 5.1.1.1. Setting controls as part of the configuration We have seen an example of this when discussing camera configurations. One important feature of this is that the controls are applied before the camera even starts, meaning the the very first camera frame will have the controls set as requested. 5.1.1.2. Setting controls before the camera starts This time we set the controls after configuring the camera, but before starting it. For example: from picamera2 import Picamera2 picam2 = Picamera2() picam2.configure(picam2.create_preview_configuration()) picam2.set_controls({"ExposureTime": 10000, "AnalogueGain": 1.0}) picam2.start() Here too the controls will have already been applied on the very first frame that we receive from the camera. 5.1.1.3. Setting controls after the camera has started This time, there will be a delay of several frames before the controls take effect. This is because there is perhaps quite a large number of requests for camera frames already in flight, and for some controls (exposure time and analogue gain specifically), the camera may actually take several frames to apply the updates. from picamera2 import Picamera2 picam2 = Picamera2() picam2.configure(picam2.create_preview_configuration()) picam2.start() picam2.set_controls({"ExposureTime": 10000, "AnalogueGain": 1.0}) This time we cannot rely on any specific frame having the value we want, so would have to check the frame’s metadata. 5.1.2. Object syntax for camera controls We saw previously how control values can be associated with a particular camera configuration. There is also an embedded instance of the Controls class inside the Picamera2 object that allows controls to be set subsequently. For example, to set controls after configuration but before starting the camera: 5.1. Camera controls 31The Picamera2 Library from picamera2 import Picamera2 picam2 = Picamera2() picam2.configure("preview") picam2.controls.ExposureTime = 10000 picam2.controls.AnalogueGain = 1.0 picam2.start() To set these controls after the camera has started we should use: from picamera2 import Picamera2 picam2 = Picamera2() picam2.configure("preview") picam2.start() with picam2.controls as controls:    controls.ExposureTime = 10000    controls.AnalogueGain = 1.0 In this final case we note the use of the with construct. Although you would normally get by without it (just set the picam2.controls directly), that would not absolutely guarantee that both controls would be applied on the same frame. You could technically find the analogue gain being set on the frame after the exposure time. In all cases, the same rules apply as to whether the controls take effect immediately or incur several frames of delay. 5.2. Autofocus Controls Autofocus controls obey the same general rules as all other controls, however, some guidance will be necessary before they can be used effectively. These controls should work correctly so long as the version of libcamera being used (such as that supplied by Raspberry Pi) implements libcamera's published autofocus API correctly, and the attached camera module actually has autofocus (such as the Raspberry Pi Camera Module 3). Camera modules that do not support autofocus (including earlier Raspberry Pi camera modules and the HQ camera) will not advertise these options as being available (in the Picamera2.camera_controls property), and attempting to set them will fail. 5.2.1. Autofocus Modes and State The autofocus (AF) state machine has 3 modes, and its activity in each of these modes can be monitored by reading the "AfState" metadata that is returned with each image. The 3 modes are: • Manual - The lens will never move spontaneously, but the "LensPosition" control can be used to move the lens "manually". The units for this control are dioptres (1 / distance in metres), so that zero can be used to denote "infinity". The "LensPosition" can be monitored in the image metadata too, and will indicate when the lens has reached the requested location. • Auto - In this mode the "AfTrigger" control can be used to start an autofocus cycle. The "AfState" metadata that is received with images can be inspected to determine when this finishes and whether it was successful, though we recommend the use of helper functions that save the user from having to implement this. In this mode too, the lens will never move spontaneously until it is "triggered" by the application. • Continuous - The autofocus algorithm will run continuously, and refocus spontaneously when necessary. Applications are free to switch between these modes as required. 5.2. Autofocus Controls 32The Picamera2 Library 5.2.2. Continuous Autofocus For example, to put the camera into continuous autofocus mode: from picamera2 import Picamera2 from libcamera import controls picam2 = Picamera2() picam2.start(show_preview=True) picam2.set_controls({"AfMode": controls.AfModeEnum.Continuous}) 5.2.3. Setting the Lens Position Manually To put the camera into manual mode and set the lens position to infinity: from picamera2 import Picamera2 from libcamera import controls picam2 = Picamera2() picam2.start(show_preview=True) picam2.set_controls({"AfMode": controls.AfModeEnum.Manual, "LensPosition": 0.0}) The lens position control (use picam2.camera_controls['LensPosition']) gives three values which are the minimum, maximum and default lens positions. The minimum value defines the furthest focal distance, and the maximum specifies the closest achieveable focal distance (by taking its reciprocal). The third value gives a "default" value, which is normally the hyperfocal position of the lens. The minimum value for the lens position is most commonly 0.0 (meaning infinity). For the maximum, a value of 10.0 would indicate that the closest focal distance is 1 / 10 metres, or 10cm. Default values might often be around 0.5 to 1.0, implying a hyperfocal distance of approximately 1 to 2m. In general, users should expect the distance calibrations to be approximate as it will depend on the accuracy of the tuning and the degree of variation between the user’s module and the module for which the calibration was performed. 5.2.4. Triggering an Autofocus Cycle For triggering an autofocus cycle in Auto mode, we recommend using a helper function that monitors the autofocus algorithm state for you, handles any complexities in the state transitions, and returns when the AF cycle is complete: from picamera2 import Picamera2 from libcamera import controls picam2 = Picamera2() picam2.start(show_preview=True) success = picam2.autofocus_cycle() The function returns True if the lens focused successfully, otherwise False. Should an application wish to avoid blocking while the autofocus cycle runs, we recommend replacing the final line (success = picam2.autofocus_cycle()) by 5.2. Autofocus Controls 33The Picamera2 Library job = picam2.autofocus_cycle(wait=False) # Now do some other things, and when you finally want to be sure the autofocus # cycle is finished: success = picam2.wait(job) This is in fact the normal method for running requests asynchronously - please see see the section on asynchronous capture for more details. 5.2.5. Other Autofocus Controls The other standard libcamera autofocus controls are also supported, including: • "AfRange" - adjust the focal distances that the algorithm searches • "AfSpeed" - try to run the autofocus algorithm faster or slower • "AfMetering" and "AfWindows" - lets the user change the area of the image used for focus. To find out more about these controls, please consult the appendices or the libcamera documentation and search for Af. Finally, there is also a Qt application that demonstrates the use of the autofocus API. 5.3. Camera properties Camera properties represent information about the sensor that applications may want to know. They cannot be changed by the application at any time, neither at runtime nor while configuring the camera, although the value of these properties may change whenever the camera is configured. Camera properties may be inspected through the camera_properties property of the Picamera2 object: from picamera2 import Picamera2 picam2 = Picamera2() picam2.camera_properties Some examples of camera properties include the model of sensor and the size of the pixel array. After configuring the camera into a particular mode it will also report the field of view from the pixel array that the mode represents, and the sensitivity of this mode relative to other camera modes. A complete list and explanation of each property can be found in the appendices.