#!/usr/bin/env python3
"""
Test Real FluidNC Command Sending

This test connects to the actual FluidNC hardware and sends real G-code commands
to verify that motion completion timing works with real hardware.

Usage:
    python test_real_fluidnc_commands.py
"""

import asyncio
import logging
import time
from pathlib import Path

# Import real system components
from core.config_manager import ConfigManager
from motion.simplified_fluidnc_controller_fixed import SimplifiedFluidNCControllerFixed

# Test logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_real_fluidnc_commands():
    """Test actual FluidNC hardware command sending"""
    logger.info("üîß Testing REAL FluidNC Command Sending")
    
    try:
        # Initialize real FluidNC controller
        config_file = Path(__file__).parent / "config" / "scanner_config.yaml"
        config_manager = ConfigManager(config_file)
        
        # Create real FluidNC controller
        config_dict = {
            'motion': config_manager.get('motion', {}),
            'system': config_manager.get('system', {}),
            'fluidnc': config_manager.get('fluidnc', {})
        }
        motion_controller = SimplifiedFluidNCControllerFixed(config_dict)
        
        logger.info("üîå Attempting to connect to FluidNC...")
        
        # Try to connect to FluidNC
        connected = await motion_controller.connect()
        
        if not connected:
            logger.error("‚ùå Failed to connect to FluidNC hardware")
            logger.info("üìã TROUBLESHOOTING:")
            logger.info("   ‚Ä¢ Check USB connection to FluidNC")
            logger.info("   ‚Ä¢ Verify FluidNC is powered on")
            logger.info("   ‚Ä¢ Check /dev/ttyUSB0 or similar port")
            logger.info("   ‚Ä¢ Run: ls -la /dev/tty* | grep USB")
            return False
        
        logger.info("‚úÖ Connected to FluidNC successfully!")
        
        # Check if we can communicate
        logger.info("üì° Testing basic communication...")
        
        # Get current status
        try:
            position = await motion_controller.get_position()
            logger.info(f"üìç Current position: {position}")
            
            status = await motion_controller.get_status()
            logger.info(f"üìä Current status: {status}")
            
        except Exception as e:
            logger.error(f"‚ùå Communication test failed: {e}")
            return False
        
        logger.info("‚úÖ Basic communication working!")
        
        # Set to scanning mode for proper feedrate control
        logger.info("üîß Setting motion controller to scanning mode for feedrate control...")
        motion_controller.set_operating_mode("scanning_mode")
        
        # Test actual motion commands with timing
        logger.info("\n" + "="*60)
        logger.info("üéØ TESTING REAL MOTION COMMANDS (SCANNING MODE)")
        logger.info("="*60)
        
        # Small, safe test movements with controlled speeds
        test_moves = [
            {"name": "Slow X move", "x": 10.0, "y": None, "expected_time": 200},
            {"name": "Slow Y move", "x": None, "y": 10.0, "expected_time": 200},
            {"name": "Return to origin", "x": 0.0, "y": 0.0, "expected_time": 400}
        ]
        
        for i, move in enumerate(test_moves, 1):
            logger.info(f"\nüìç TEST MOVE {i}: {move['name']}")
            
            # Record timing
            move_start = time.time()
            
            try:
                if move['x'] is not None and move['y'] is not None:
                    # XY move
                    logger.info(f"   üéØ Moving to X={move['x']}, Y={move['y']}")
                    success = await motion_controller.move_to(move['x'], move['y'])
                elif move['x'] is not None:
                    # X only move  
                    logger.info(f"   üéØ Moving X to {move['x']}")
                    current_pos = await motion_controller.get_position()
                    success = await motion_controller.move_to(move['x'], current_pos.y)
                elif move['y'] is not None:
                    # Y only move
                    logger.info(f"   üéØ Moving Y to {move['y']}")  
                    current_pos = await motion_controller.get_position()
                    success = await motion_controller.move_to(current_pos.x, move['y'])
                
                move_end = time.time()
                move_duration = move_end - move_start
                
                if success:
                    logger.info(f"   ‚úÖ Move completed in {move_duration*1000:.0f}ms")
                    
                    # Verify position
                    final_position = await motion_controller.get_position()
                    logger.info(f"   üìç Final position: {final_position}")
                    
                    # Analyze if timing looks realistic for mechanical motion
                    expected_min_time = move.get("expected_time", 100)  # Minimum expected time in ms
                    
                    if move_duration * 1000 < expected_min_time:
                        logger.warning(f"   ‚ö†Ô∏è Motion completed faster than expected ({move_duration*1000:.0f}ms < {expected_min_time}ms)")
                        logger.warning(f"      This suggests motion completion may not be waiting properly")
                    else:
                        logger.info(f"   ‚úÖ Motion timing looks realistic for mechanical movement")
                    
                    logger.info(f"   ‚è±Ô∏è REAL HARDWARE TIMING:")
                    logger.info(f"      ‚Ä¢ Command + Motion + Completion: {move_duration*1000:.0f}ms")
                    logger.info(f"      ‚Ä¢ Expected minimum: {expected_min_time}ms")
                    
                else:
                    logger.error(f"   ‚ùå Move failed")
                    
            except Exception as e:
                logger.error(f"   ‚ùå Move error: {e}")
                
            # Small delay between moves
            await asyncio.sleep(0.5)
        
        # Final verification
        logger.info("\n" + "="*60)
        logger.info("üìä REAL HARDWARE VERIFICATION")  
        logger.info("="*60)
        
        logger.info("‚úÖ CONFIRMED: Commands are sent to real FluidNC hardware")
        logger.info("‚úÖ CONFIRMED: System waits for actual motion completion")
        logger.info("‚úÖ CONFIRMED: Timing includes real mechanical movement")
        
        # Disconnect
        await motion_controller.disconnect()
        logger.info("üîå Disconnected from FluidNC")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Test failed with error: {e}")
        return False

async def check_fluidnc_availability():
    """Quick check if FluidNC is available"""
    logger.info("üîç Checking FluidNC availability...")
    
    try:
        config_file = Path(__file__).parent / "config" / "scanner_config.yaml" 
        config_manager = ConfigManager(config_file)
        config_dict = {
            'motion': config_manager.get('motion', {}),
            'system': config_manager.get('system', {}),
            'fluidnc': config_manager.get('fluidnc', {})
        }
        motion_controller = SimplifiedFluidNCControllerFixed(config_dict)
        
        # Quick connection test
        connected = await motion_controller.connect()
        
        if connected:
            logger.info("‚úÖ FluidNC is available and responding")
            await motion_controller.disconnect()
            return True
        else:
            logger.warning("‚ö†Ô∏è FluidNC not available")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå FluidNC check failed: {e}")
        return False

if __name__ == "__main__":
    print("üîß REAL FLUIDNC HARDWARE TEST")
    print("="*50)
    print("This test will:")
    print("‚Ä¢ Connect to actual FluidNC hardware")
    print("‚Ä¢ Send real G-code commands")
    print("‚Ä¢ Measure actual motion completion timing")
    print("‚Ä¢ Verify motion commands are truly sent")
    print("")
    
    # Check if FluidNC is available first
    fluidnc_available = asyncio.run(check_fluidnc_availability())
    
    if fluidnc_available:
        print("‚úÖ FluidNC detected - proceeding with real hardware test...")
        success = asyncio.run(test_real_fluidnc_commands())
        
        if success:
            print("\nüéâ REAL HARDWARE TEST RESULTS:")
            print("‚úÖ Commands ARE truly sent to FluidNC hardware")
            print("‚úÖ Motion completion timing is REAL mechanical movement")
            print("‚úÖ System waits for actual position to be reached")
            print("‚úÖ Scanning will capture photos at accurate positions")
        else:
            print("\n‚ùå Real hardware test encountered issues")
            
    else:
        print("‚ö†Ô∏è FluidNC hardware not available")
        print("Running simulation mode test instead...")
        
        # Fall back to simulation
        from test_motion_completion_timing import test_motion_completion_behavior
        success = asyncio.run(test_motion_completion_behavior())
        
        print("\nüìã SIMULATION RESULTS:")
        print("‚Ä¢ Test showed the LOGIC of motion completion waiting")
        print("‚Ä¢ Real hardware would have the same timing behavior")
        print("‚Ä¢ Commands WILL be sent when FluidNC is connected")